<?php
//require 'PHPUnit/Extensions/Database/TestCase.php';

/**
 * Test class for Application_Model_DbTable_ZfRegistro.
 * Generated by PHPUnit on 2012-12-06 at 11:28:37.
 */
class Application_Model_DbTable_ZfRegistroTest extends PHPUnit_Framework_TestCase
{
    private $_table;
    private static $_id;
    private $_cols = array('id', 'id_transaccion', 'operacion', 'usuario',
                           'ip_cliente', 'agente_cliente', 'tabla_esquema',
                           'tabla_nombre', 'tabla_clave_primaria',
                           'tabla_clave_primaria_valor', 'tabla_campo',
                           'tabla_valor_viejo', 'tabla_valor_nuevo',
                           'fecha_hora');

    public function setUp()
    {
        $this->_table = new Application_Model_DbTable_ZfRegistro();
    }

    public function testDbTable()
    {
        $this->assertInstanceOf('Application_Model_DbTable_ZfRegistro', $this->_table);
    }
    
    public function testAdapter()
    {   
        $this->assertInstanceOf('Zend_Db_Adapter_Pdo_Pgsql', $this->_table->getAdapter());
    }
    
    public function testColumns()
    {
        $cols = $this->_table->info(Zend_Db_Table::COLS);
        sort($this->_cols);
        sort($cols);
        $this->assertEquals($this->_cols, $cols);
    }
    
    public function testFetchAll()
    {
        try {
            $this->assertInstanceOf('Zend_Db_Table_Rowset', $this->_table->fetchAll());
        } catch (Exception $e) {
            $this->assertTrue(false, $e->getMessage());
        }   
    }
        
    public function testAdd()
    {
        try {
            $row = $this->_table->createRow();
            $row->id_transaccion = md5('testingzfbase');
            $row->operacion = 'CREATE';
            $row->usuario = 'user_phpunit';
            $row->ip_cliente = '127.0.0.1';
            $row->agente_cliente = 'Agente Testing';
            $row->tabla_esquema = $this->_table->info(Zend_Db_Table::SCHEMA);
            $row->tabla_nombre = $this->_table->info(Zend_Db_Table::NAME);
            $row->tabla_clave_primaria = implode(',', (array) $this->_table->info(Zend_Db_Table::PRIMARY));
            $row->tabla_clave_primaria_valor = 'test';
            $row->tabla_campo = 'test';
            $row->tabla_valor_viejo = 'test';
            $row->tabla_valor_nuevo = 'test';
            self::$_id = $row->save();
            $this->assertNotEmpty(self::$_id);
        } catch (Exception $e) {
            $this->assertTrue(false, $e->getMessage());
        }
    }
    
    public function testFind()
    {
        try {
            $this->assertGreaterThan(0, $this->_table->find(self::$_id)->count());
        } catch (Exception $e) {
            $this->assertTrue(false, $e->getMessage());
        }        
    }
    
    public function testEdit()
    {
        try {
            $this->_table
                 ->find(self::$_id)
                 ->current()
                 ->setFromArray(array(
                    'id_transaccion' => md5('testingzfbase2'),
                    'operacion' => 'UPDATE',
                    'usuario' => 'user_phpunit',
                    'ip_cliente' => '127.0.0.2',
                    'agente_cliente' => 'Agente Testing Edit',
                    'tabla_esquema' => $this->_table->info(Zend_Db_Table::SCHEMA),
                    'tabla_nombre' => $this->_table->info(Zend_Db_Table::NAME),
                    'tabla_clave_primaria' => implode(',', (array) $this->_table->info(Zend_Db_Table::PRIMARY)),
                    'tabla_clave_primaria_valor' => 'testedit',
                    'tabla_campo' => 'testedit',
                    'tabla_valor_viejo' => 'testedit',
                    'tabla_valor_nuevo' => 'testedit'
                 ))
                 ->save();
            $this->assertTrue(true);
        } catch (Exception $e) {
            $this->assertTrue(false, $e->getMessage());
        }        
    }
    
    public function testDelete()
    {
        try {
            $this->assertGreaterThan(0, $this->_table->find(self::$_id)->current()->delete());
        } catch (Exception $e) {
            $this->assertTrue(false, $e->getMessage());
        }        
    }
}