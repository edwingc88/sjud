<?php

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-07-22 at 15:38:21.
 */
class Fmo_DisplayNameTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var Fmo_DisplayName
     */
    protected $_dn;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->_dn = new Fmo_DisplayName();
        parent::setUp();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        parent::tearDown();
        $this->_dn = NULL;
    }

    /**
     * @covers Fmo_DisplayName::__construct
     */
    public function test__construct()
    {
        $person = Fmo_Model_Personal::findOneByCedula(12130304);
        $this->assertEquals($this->_dn, new Fmo_DisplayName());
        $this->assertEquals($this->_dn->setPerson($person), new Fmo_DisplayName($person));
        $this->assertEquals($this->_dn->setFormat(Fmo_DisplayName::FORMAT_EMAIL), new Fmo_DisplayName($person, Fmo_DisplayName::FORMAT_EMAIL));
        $this->assertEquals($this->_dn->setEscape(FALSE), new Fmo_DisplayName($person, Fmo_DisplayName::FORMAT_EMAIL, FALSE));
    }

    /**
     * @covers Fmo_DisplayName::_encode
     */
    public function test_encode()
    {
        $expected = "\t\\/@°|\"'#$%&/()=¿?¡!áéúóúñüÑ{}[]<>\n\r";

        $refl = new ReflectionClass($this->_dn);
        $method = $refl->getMethod('_encode');
        $method->setAccessible(TRUE);

        $this->assertEquals(rawurlencode(utf8_encode($expected)), $method->invokeArgs($this->_dn, array($expected)));
    }

    /**
     * @covers Fmo_DisplayName::getFormat
     * @todo   Implement testGetFormat().
     */
    public function testGetFormat()
    {
        $this->assertEquals(Fmo_DisplayName::FORMAT_DEFAULT, $this->_dn->setFormat()->getFormat());
        $this->assertEquals(Fmo_DisplayName::FORMAT_DEFAULT, $this->_dn->setFormat(Fmo_DisplayName::FORMAT_DEFAULT)->getFormat());
        $this->assertEquals(Fmo_DisplayName::FORMAT_NET, $this->_dn->setFormat(Fmo_DisplayName::FORMAT_NET)->getFormat());
        $this->assertEquals(Fmo_DisplayName::FORMAT_EMAIL, $this->_dn->setFormat(Fmo_DisplayName::FORMAT_EMAIL)->getFormat());
    }

    /**
     * @covers Fmo_DisplayName::setFormat
     * @todo   Implement testSetFormat().
     */
    public function testSetFormat()
    {
        $this->assertEquals(Fmo_DisplayName::FORMAT_DEFAULT, $this->_dn->setFormat()->getFormat());
        $this->assertEquals(Fmo_DisplayName::FORMAT_DEFAULT, $this->_dn->setFormat(NULL)->getFormat());
        $this->assertEquals(Fmo_DisplayName::FORMAT_DEFAULT, $this->_dn->setFormat(Fmo_DisplayName::FORMAT_DEFAULT)->getFormat());
        $this->assertEquals(Fmo_DisplayName::FORMAT_NET, $this->_dn->setFormat(Fmo_DisplayName::FORMAT_NET)->getFormat());
        $this->assertEquals(Fmo_DisplayName::FORMAT_EMAIL, $this->_dn->setFormat(Fmo_DisplayName::FORMAT_EMAIL)->getFormat());
        try {
            $this->_dn->setFormat('XXX');
            $this->assertTrue(FALSE, "El formato '{$this->_dn->getFormat()}' es inválido.");
        } catch (InvalidArgumentException $ex) {
            $this->assertTrue(TRUE, $ex->getMessage());
        }
    }

    /**
     * @covers Fmo_DisplayName::getSeparatorId
     * @todo   Implement testGetSeparatorId().
     */
    public function testGetSeparatorId()
    {
        $this->assertEquals(Fmo_DisplayName::DEFAULT_SEPARATOR_ID, $this->_dn->getSeparatorId());
    }

    /**
     * @covers Fmo_DisplayName::setSeparatorId
     * @todo   Implement testSetSeparatorId().
     */
    public function testSetSeparatorId()
    {
        $this->assertEquals(' F-', $this->_dn->setSeparatorId(' F-')->getSeparatorId());
        $this->assertEquals(Fmo_DisplayName::DEFAULT_SEPARATOR_ID, $this->_dn->setSeparatorId(NULL)->getSeparatorId());
    }

    /**
     * @covers Fmo_DisplayName::getSeparatorName
     * @todo   Implement testGetSeparatorName().
     */
    public function testGetSeparatorName()
    {
        $this->assertEquals(Fmo_DisplayName::DEFAULT_SEPARATOR_NAME, $this->_dn->getSeparatorName());
    }

    /**
     * @covers Fmo_DisplayName::setSeparatorName
     * @todo   Implement testSetSeparatorName().
     */
    public function testSetSeparatorName()
    {
        $this->assertEquals(Fmo_DisplayName::DEFAULT_SEPARATOR_NAME, $this->_dn->setSeparatorName(NULL)->getSeparatorName());
        $this->assertEquals(Fmo_DisplayName::DEFAULT_SEPARATOR_NAME, $this->_dn->setSeparatorName()->getSeparatorName());
        $this->assertEquals(' | ', $this->_dn->setSeparatorName(' | ')->getSeparatorName());
    }

    /**
     * @covers Fmo_DisplayName::getSeparatorTextLeft
     * @todo   Implement testGetSeparatorTextLeft().
     */
    public function testGetSeparatorTextLeft()
    {
        $this->assertEquals(Fmo_DisplayName::DEFAULT_SEPARATOR_TEXT_LEFT, $this->_dn->setSeparatorTextLeft()->getSeparatorTextLeft());
    }

    /**
     * @covers Fmo_DisplayName::setSeparatorTextLeft
     * @todo   Implement testSetSeparatorTextLeft().
     */
    public function testSetSeparatorTextLeft()
    {
        $this->assertEquals(Fmo_DisplayName::DEFAULT_SEPARATOR_TEXT_LEFT, $this->_dn->setSeparatorTextLeft(NULL)->getSeparatorTextLeft());
        $this->assertEquals(Fmo_DisplayName::DEFAULT_SEPARATOR_TEXT_LEFT, $this->_dn->setSeparatorTextLeft()->getSeparatorTextLeft());
        $this->assertEquals('<', $this->_dn->setSeparatorTextLeft('<')->getSeparatorTextLeft());
    }

    /**
     * @covers Fmo_DisplayName::getSeparatorTextRight
     * @todo   Implement testGetSeparatorTextRight().
     */
    public function testGetSeparatorTextRight()
    {
        $this->assertEquals(Fmo_DisplayName::DEFAULT_SEPARATOR_TEXT_RIGHT, $this->_dn->setSeparatorTextRight()->getSeparatorTextRight());
    }

    /**
     * @covers Fmo_DisplayName::setSeparatorTextRight
     * @todo   Implement testSetSeparatorTextRight().
     */
    public function testSetSeparatorTextRight()
    {
        $this->assertEquals(Fmo_DisplayName::DEFAULT_SEPARATOR_TEXT_RIGHT, $this->_dn->setSeparatorTextRight(NULL)->getSeparatorTextRight());
        $this->assertEquals(Fmo_DisplayName::DEFAULT_SEPARATOR_TEXT_RIGHT, $this->_dn->setSeparatorTextRight()->getSeparatorTextRight());
        $this->assertEquals(' > ', $this->_dn->setSeparatorTextRight(' > ')->getSeparatorTextRight());
    }

    /**
     * @covers Fmo_DisplayName::getSurnameStyle
     * @todo   Implement testGetSurnameStyle().
     */
    public function testGetSurnameStyle()
    {
        $this->assertEquals(Fmo_DisplayName::STYLE_UPPER, $this->_dn->setSurnameStyle()->getSurnameStyle());
    }

    /**
     * @covers Fmo_DisplayName::setSurnameStyle
     * @todo   Implement testSetSurnameStyle().
     */
    public function testSetSurnameStyle()
    {
        $this->assertEquals(Fmo_DisplayName::STYLE_UPPER, $this->_dn->setSurnameStyle()->getSurnameStyle());
        $this->assertEquals(Fmo_DisplayName::STYLE_UPPER, $this->_dn->setSurnameStyle(NULL)->getSurnameStyle());
        $this->assertEquals(Fmo_DisplayName::STYLE_TITLE, $this->_dn->setSurnameStyle(Fmo_DisplayName::STYLE_TITLE)->getSurnameStyle());
        $this->assertEquals(Fmo_DisplayName::STYLE_LOWER, $this->_dn->setSurnameStyle(Fmo_DisplayName::STYLE_LOWER)->getSurnameStyle());
        $this->assertEquals(Fmo_DisplayName::STYLE_UPPER, $this->_dn->setSurnameStyle(Fmo_DisplayName::STYLE_UPPER)->getSurnameStyle());
        try {
            $this->_dn->setSurnameStyle('PRUEBA');
            $this->assertTrue(FALSE);
        } catch (InvalidArgumentException $ex) {
            $this->assertTrue(TRUE, $ex->getMessage());
        }
    }

    /**
     * @covers Fmo_DisplayName::getNameStyle
     * @todo   Implement testGetNameStyle().
     */
    public function testGetNameStyle()
    {
        $this->assertEquals(Fmo_DisplayName::STYLE_TITLE, $this->_dn->setNameStyle()->getNameStyle());
    }

    /**
     * @covers Fmo_DisplayName::setNameStyle
     * @todo   Implement testSetNameStyle().
     */
    public function testSetNameStyle()
    {
        $this->assertEquals(Fmo_DisplayName::STYLE_TITLE, $this->_dn->setNameStyle()->getNameStyle());
        $this->assertEquals(Fmo_DisplayName::STYLE_TITLE, $this->_dn->setNameStyle(NULL)->getNameStyle());
        $this->assertEquals(Fmo_DisplayName::STYLE_TITLE, $this->_dn->setNameStyle(Fmo_DisplayName::STYLE_TITLE)->getNameStyle());
        $this->assertEquals(Fmo_DisplayName::STYLE_LOWER, $this->_dn->setNameStyle(Fmo_DisplayName::STYLE_LOWER)->getNameStyle());
        $this->assertEquals(Fmo_DisplayName::STYLE_UPPER, $this->_dn->setNameStyle(Fmo_DisplayName::STYLE_UPPER)->getNameStyle());
        try {
            $this->_dn->setNameStyle('PRUEBA');
            $this->assertTrue(FALSE);
        } catch (InvalidArgumentException $ex) {
            $this->assertTrue(TRUE, $ex->getMessage());
        }
    }

    /**
     * @covers Fmo_DisplayName::isEscape
     * @todo   Implement testIsEscape().
     */
    public function testIsEscape()
    {
        $this->assertTrue($this->_dn->setEscape()->isEscape());
    }

    /**
     * @covers Fmo_DisplayName::setEscape
     * @todo   Implement testSetEscape().
     */
    public function testSetEscape()
    {
        $this->assertFalse($this->_dn->setEscape(FALSE)->isEscape());
        $this->assertFalse($this->_dn->setEscape(NULL)->isEscape());
        $this->assertFalse($this->_dn->setEscape(0)->isEscape());
        $this->assertTrue($this->_dn->setEscape(TRUE)->isEscape());
        $this->assertTrue($this->_dn->setEscape()->isEscape());
    }

    /**
     * @covers Fmo_DisplayName::setPerson
     * @todo   Implement testSetPerson().
     */
    public function testSetPerson()
    {
        $person = Fmo_Model_Personal::findOneByCedula(12130304);
        $this->assertEquals($person, $this->_dn->setPerson($person)->getPerson());
        try {
            $this->_dn->setPerson(Fmo_Model_Personal::findOneByCedula(0));
            $this->assertTrue(FALSE);
        } catch (Exception $ex) {
            $this->assertTrue(TRUE, $ex->getMessage());
        }
    }

    /**
     * @covers Fmo_DisplayName::getPerson
     * @todo   Implement testGetPerson().
     */
    public function testGetPerson()
    {
        $person = Fmo_Model_Personal::findOneByCedula(12130304);
        $this->assertEquals($person, $this->_dn->setPerson($person)->getPerson());
    }

    /**
     * @covers Fmo_DisplayName::render
     * @todo   Implement testRender().
     */
    public function testRender()
    {
        $this->assertEquals('RODRIGUEZ SALAZAR, Rafael Alexis / FMO 8741',
                            $this->_dn
                                 ->setDefaults()
                                 ->setPerson(Fmo_Model_Personal::findOneByCedula(12130304))
                                 ->render());
        $this->assertEquals('RODRIGUEZ SALAZAR, Rafael Alexis / FMO 8741 «<a href="mailto:rafaelars%40ferrominera.com?subject=Coloque%20el%20asunto&amp;body=Coloque%20el%20texto%20a%20enviar">rafaelars@ferrominera.com</a>»',
                            $this->_dn
                                 ->setFormat(Fmo_DisplayName::FORMAT_EMAIL)
                                 ->render());
        $this->assertEquals('RODRIGUEZ SALAZAR, Rafael Alexis / FMO 8741 «rafaelars@ferrominera.com»',
                            $this->_dn
                                 ->setFormat(Fmo_DisplayName::FORMAT_EMAIL)
                                 ->setEscape(FALSE)
                                 ->render());
        $this->assertEquals('RODRIGUEZ SALAZAR, Rafael Alexis / FMO 8741 «rafaelars»',
                            $this->_dn
                                 ->setFormat(Fmo_DisplayName::FORMAT_NET)
                                 ->render());
        $this->assertEquals('RODRIGUEZ SALAZAR, Rafael Alexis / FMO 8741 &lt;rafaelars&gt;',
                            $this->_dn
                                 ->setSeparatorTextLeft(' <')
                                 ->setSeparatorTextRight('>')
                                 ->setEscape()
                                 ->render());
        $this->assertEquals('RODRIGUEZ SALAZAR, Rafael Alexis / FMO 8741 <rafaelars>',
                            $this->_dn
                                 ->setEscape(FALSE)
                                 ->render());
        $this->assertEquals('Rodriguez Salazar, RAFAEL ALEXIS F-8741 <rafaelars>',
                            $this->_dn
                                 ->setSeparatorId(' F-')
                                 ->setSurnameStyle(Fmo_DisplayName::STYLE_TITLE)
                                 ->setNameStyle(Fmo_DisplayName::STYLE_UPPER)
                                 ->render());
        $this->assertEquals('rodriguez salazar, rafael alexis F-8741 <rafaelars>',
                            $this->_dn
                                 ->setSeparatorId(' F-')
                                 ->setSurnameStyle(Fmo_DisplayName::STYLE_LOWER)
                                 ->setNameStyle(Fmo_DisplayName::STYLE_LOWER)
                                 ->render());
        unset($this->_dn->getPerson()->{Fmo_Model_Personal::APELLIDO},
              $this->_dn->getPerson()->{Fmo_Model_Personal::NOMBRE},
              $this->_dn->getPerson()->{Fmo_Model_Personal::SIGLADO},
              $this->_dn->getPerson()->{Fmo_Model_Personal::CORREO_ELECTRONICO});
        $this->assertEquals(' / FMO 8741', $this->_dn->setDefaults()->render());
    }

    /**
     * @covers Fmo_DisplayName::display
     * @todo   Implement testDisplay().
     */
    public function testDisplay()
    {
        $person = Fmo_Model_Personal::findOneByCedula(12130304);
        $this->assertEquals('RODRIGUEZ SALAZAR, Rafael Alexis / FMO 8741', Fmo_DisplayName::display($person));
        $this->assertEquals('RODRIGUEZ SALAZAR, Rafael Alexis / FMO 8741 «<a href="mailto:rafaelars%40ferrominera.com?subject=Coloque%20el%20asunto&amp;body=Coloque%20el%20texto%20a%20enviar">rafaelars@ferrominera.com</a>»', Fmo_DisplayName::display($person, Fmo_DisplayName::FORMAT_EMAIL));
        $this->assertEquals('RODRIGUEZ SALAZAR, Rafael Alexis / FMO 8741 «rafaelars@ferrominera.com»', Fmo_DisplayName::display($person, Fmo_DisplayName::FORMAT_EMAIL, FALSE));
        $this->assertEquals('RODRIGUEZ SALAZAR, Rafael Alexis / FMO 8741 «rafaelars»', Fmo_DisplayName::display($person, Fmo_DisplayName::FORMAT_NET));
    }

    /**
     * @covers Fmo_DisplayName::__toString
     * @todo   Implement test__toString().
     */
    public function test__toString()
    {
        $actual = new Fmo_DisplayName(Fmo_Model_Personal::findOneByCedula(12130304));
        $this->assertEquals('RODRIGUEZ SALAZAR, Rafael Alexis / FMO 8741', $actual->__toString());
    }

    /**
     * @covers Fmo_DisplayName::setDefaults
     */
    public function testSetDefaults()
    {
        $this->assertEquals(new Fmo_DisplayName(), $this->_dn->setDefaults());
    }
}
